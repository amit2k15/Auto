from pyzabbix import ZabbixAPI
import openpyxl
from datetime import datetime
import statistics

# Zabbix connection settings
ZABBIX_URL = 'https://your-zabbix-server-url/zabbix'
ZABBIX_USERNAME = 'your_username'
ZABBIX_PASSWORD = 'your_password'

# Time interval (Q1 2025)
START_DATE = "2025-01-01 00:00:00"
END_DATE = "2025-03-31 23:59:59"
start_time = int(datetime.strptime(START_DATE, "%Y-%m-%d %H:%M:%S").timestamp())
end_time = int(datetime.strptime(END_DATE, "%Y-%m-%d %H:%M:%S").timestamp())

# Metrics keys
CPU_KEY = 'system.cpu.util'
MEMORY_KEY = 'vm.memory.utilization'

# Host group
HOSTGROUP_NAME = 'Your Host Group Name'

# Connect to Zabbix API
zapi = ZabbixAPI(ZABBIX_URL)
zapi.login(ZABBIX_USERNAME, ZABBIX_PASSWORD)

# Get host group ID
hostgroups = zapi.hostgroup.get(filter={"name": HOSTGROUP_NAME})
if not hostgroups:
    print(f"Host group '{HOSTGROUP_NAME}' not found.")
    exit(1)
hostgroup_id = hostgroups[0]['groupid']

# Get hosts in host group
hosts = zapi.host.get(groupids=hostgroup_id, output=["hostid", "host"])

# Create Excel workbook
wb = openpyxl.Workbook()
ws = wb.active
ws.title = "Q1 Utilization"
ws.append(["Hostname", "Q1-Avg CPU", "Q1-Max CPU", "Q1-Avg Memory", "Q1-Max Memory"])

# Process each host
for host in hosts:
    hostname = host['host']
    hostid = host['hostid']

    # Fetch item IDs for CPU and Memory
    cpu_items = zapi.item.get(hostids=hostid, search={"key_": CPU_KEY}, output=["itemid"])
    mem_items = zapi.item.get(hostids=hostid, search={"key_": MEMORY_KEY}, output=["itemid"])

    if not cpu_items or not mem_items:
        print(f"Skipping {hostname} (missing CPU or Memory item)")
        continue

    cpu_itemid = cpu_items[0]['itemid']
    mem_itemid = mem_items[0]['itemid']

    # Fetch historical data
    cpu_history = zapi.history.get(itemids=cpu_itemid, time_from=start_time, time_till=end_time, history=0, output="extend", limit=10000)
    mem_history = zapi.history.get(itemids=mem_itemid, time_from=start_time, time_till=end_time, history=0, output="extend", limit=10000)

    # Extract values
    cpu_values = [float(point['value']) for point in cpu_history]
    mem_values = [float(point['value']) for point in mem_history]

    if cpu_values and mem_values:
        avg_cpu = round(statistics.mean(cpu_values), 2)
        max_cpu = round(max(cpu_values), 2)
        avg_mem = round(statistics.mean(mem_values), 2)
        max_mem = round(max(mem_values), 2)
    else:
        avg_cpu = max_cpu = avg_mem = max_mem = "N/A"

    # Write to Excel
    ws.append([hostname, avg_cpu, max_cpu, avg_mem, max_mem])

# Save workbook
output_file = "Q1_Utilization_Report.xlsx"
wb.save(output_file)
print(f"Report saved to {output_file}")
