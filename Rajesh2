import pandas as pd
from pyzabbix import ZabbixAPI
from datetime import datetime

# Zabbix API credentials
ZABBIX_URL = 'http://your_zabbix_server_url/zabbix'
ZABBIX_USER = 'your_username'
ZABBIX_PASSWORD = 'your_password'

# Configuration
HOSTGROUP_NAME = 'Your Hostgroup Name'
START_DATE = '2025-01-01 00:00:00'
END_DATE = '2025-03-31 23:59:59'
OUTPUT_FILE = 'host_utilization_q1_2025.xlsx'

# Connect to Zabbix API
zapi = ZabbixAPI(ZABBIX_URL)
zapi.login(ZABBIX_USER, ZABBIX_PASSWORD)
print(f"Connected to Zabbix API Version {zapi.api_version()}")

def convert_to_timestamp(date_str):
    """Convert date string to UNIX timestamp"""
    return int(datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S').timestamp())

# Get time range in timestamps
time_from = convert_to_timestamp(START_DATE)
time_till = convert_to_timestamp(END_DATE)

# Get hostgroup ID
hostgroup = zapi.hostgroup.get(filter={'name': HOSTGROUP_NAME})
if not hostgroup:
    raise ValueError(f"Hostgroup '{HOSTGROUP_NAME}' not found")
hostgroup_id = hostgroup[0]['groupid']

# Get all hosts in the hostgroup
hosts = zapi.host.get(groupids=hostgroup_id, output=['hostid', 'name'])
if not hosts:
    raise ValueError(f"No hosts found in hostgroup '{HOSTGROUP_NAME}'")

# Prepare results list
results = []

for host in hosts:
    hostname = host['name']
    hostid = host['hostid']
    
    print(f"Processing host: {hostname}")
    
    # Get CPU utilization metrics (system.cpu.util)
    cpu_data = zapi.history.get(
        hostids=hostid,
        time_from=time_from,
        time_till=time_till,
        output='extend',
        history=0,  # float values
        item_key='system.cpu.util'
    )
    
    # Get Memory utilization metrics (vm.memory.utilization)
    memory_data = zapi.history.get(
        hostids=hostid,
        time_from=time_from,
        time_till=time_till,
        output='extend',
        history=0,  # float values
        item_key='vm.memory.utilization'
    )
    
    # Process CPU data
    if cpu_data:
        cpu_values = [float(item['value']) for item in cpu_data]
        avg_cpu = sum(cpu_values) / len(cpu_values)
        max_cpu = max(cpu_values)
    else:
        avg_cpu = 0
        max_cpu = 0
    
    # Process Memory data
    if memory_data:
        memory_values = [float(item['value']) for item in memory_data]
        avg_memory = sum(memory_values) / len(memory_values)
        max_memory = max(memory_values)
    else:
        avg_memory = 0
        max_memory = 0
    
    results.append({
        'Hostname': hostname,
        'Q1-Avg CPU': round(avg_cpu, 2),
        'Q1-Max CPU': round(max_cpu, 2),
        'Q1-Avg Memory': round(avg_memory, 2),
        'Q1-Max Memory': round(max_memory, 2)
    })

# Create DataFrame and save to Excel
df = pd.DataFrame(results)
df.to_excel(OUTPUT_FILE, index=False, sheet_name='Q1 2025 Utilization')

print(f"Report generated successfully: {OUTPUT_FILE}")

# Logout from Zabbix API
zapi.user.logout()
