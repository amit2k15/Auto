from pyzabbix import ZabbixAPI
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import smtplib

# Zabbix API configuration
zabbix_url = 'http://zabbix.com/zabbix'
zabbix_user = ''
zabbix_password = ''

# Connect to Zabbix API
zabbix = ZabbixAPI(zabbix_url)
zabbix.login(zabbix_user, zabbix_password)

# Define host groups and item names
host_groups = ['A', 'B']
item_name = 'proc.num[TwinCATMessengerServer.exe]'

# Function to get service status for a host
def get_service_status(host_id):
    items = zabbix.item.get(hostids=host_id, search={'key_': item_name})
    if items:
        item_id = items[0]['itemid']
        item_value = zabbix.history.get(itemids=item_id, output='extend', limit=1, sortfield='clock', sortorder='DESC')[0]['value']
        return item_value
    else:
        return None

# Function to get web items for a host
def get_web_items(host_id):
    web_items = zabbix.item.get(hostids=host_id, webitems=True, output=['itemid', 'name', 'lastvalue'])
    return [{"name": item["name"], "lastvalue": item["lastvalue"]} for item in web_items if "response code" in item["name"].lower()]

# Function to get QMSI service status (items with Application:service tag)
def get_qmsi_status(host_id):
    items = zabbix.item.get(
        hostids=host_id,
        tags=[{"tag": "Application", "value": "service"}],
        output=['itemid', 'name', 'lastvalue']
    )
    return [{"name": item["name"], "lastvalue": item["lastvalue"]} for item in items]

# Function to get Archiving Job status
def get_archiving_job_status(host_id):
    items = zabbix.item.get(
        hostids=host_id,
        search={'name': 'Archiving job Status'},
        output=['itemid', 'name', 'lastvalue']
    )
    return [{"name": item["name"], "lastvalue": item["lastvalue"]} for item in items]

# Initialize overall status tracking
overall_status_ok = True

#Twincat
email_body = f"""<html>
<head></head>
<body>
    Hi Team,<br>
    Below, please find the morning checkout status at the integration sites for {datetime.now().strftime('%Y-%m-%d')}
    <h4>TwincatMessenger</h4>
    <table border="1">
        <tr>
            <th>Application Name</th>
            <th>Status</th>
        </tr>
"""
# Check service status for each host in each host group
for group in host_groups:
    status_list = []
    hosts = zabbix.host.get(groupids=zabbix.hostgroup.get(filter={'name': group})[0]['groupid'])
    for host in hosts:
        service_status = get_service_status(host['hostid'])
        if service_status is not None:
            status_list.append(service_status)
    group_status = all(status == "1" for status in status_list)
    if not group_status:
        overall_status_ok = False
    overall_status = "UP" if group_status else "Down"
    group_name = zabbix.hostgroup.get(filter={'name': group})[0]['name']
    email_body += f"""
                <tr>
                    <td>{group_name}</td>
                    <td>{overall_status}</td>
                </tr>
        """

#Web
email_body += """
    </table>
    <h4>WEB URLs</h4>
    <table border="1">
        <tr>
            <th>Application Name</th>
            <th>Status</th>
        </tr>
"""
# Check service status for each host in each host group
for group in host_groups:
    web_items_list = []
    hosts = zabbix.host.get(groupids=zabbix.hostgroup.get(filter={'name': group})[0]['groupid'])
    for host in hosts:
        web_items = get_web_items(host['hostid'])
        web_items_list.extend(web_items)
    group_web_status = all(status['lastvalue'] == '200' for status in web_items_list)
    if not group_web_status:
        overall_status_ok = False
    overall_web = "Accessible" if group_web_status else "Inaccessible"
    group_name = zabbix.hostgroup.get(filter={'name': group})[0]['name']
    email_body += f"""
                <tr>
                    <td>{group_name}</td>
                    <td>{overall_web}</td>
                </tr>
        """

# QMSI Services
email_body += """
    </table>
    <h4>QMSI Services</h4>
    <table border="1">
        <tr>
            <th>Application Name</th>
            <th>Status</th>
        </tr>
"""
# Check QMSI service status for each host in each host group
for group in host_groups:
    qmsi_status_list = []
    hosts = zabbix.host.get(groupids=zabbix.hostgroup.get(filter={'name': group})[0]['groupid'])
    for host in hosts:
        qmsi_items = get_qmsi_status(host['hostid'])
        qmsi_status_list.extend(qmsi_items)
    # Assuming service is UP if lastvalue is "1" (similar to Twincat)
    group_qmsi_status = all(status['lastvalue'] == "1" for status in qmsi_status_list)
    if not group_qmsi_status:
        overall_status_ok = False
    overall_qmsi = "UP" if group_qmsi_status else "Down"
    group_name = zabbix.hostgroup.get(filter={'name': group})[0]['name']
    email_body += f"""
                <tr>
                    <td>{group_name}</td>
                    <td>{overall_qmsi}</td>
                </tr>
        """

# Archiving Job Status
email_body += """
    </table>
    <h4>Archiving Job Status</h4>
    <table border="1">
        <tr>
            <th>Application Name</th>
            <th>Status</th>
        </tr>
"""
# Check Archiving Job status for each host in each host group
for group in host_groups:
    archiving_status_list = []
    hosts = zabbix.host.get(groupids=zabbix.hostgroup.get(filter={'name': group})[0]['groupid'])
    for host in hosts:
        archiving_items = get_archiving_job_status(host['hostid'])
        archiving_status_list.extend(archiving_items)
    # Status is "Running" if 0, "Error" if 1
    group_archiving_status = all(status['lastvalue'] == "0" for status in archiving_status_list)
    if not group_archiving_status:
        overall_status_ok = False
    overall_archiving = "Running" if group_archiving_status else "Error"
    group_name = zabbix.hostgroup.get(filter={'name': group})[0]['name']
    email_body += f"""
                <tr>
                    <td>{group_name}</td>
                    <td>{overall_archiving}</td>
                </tr>
        """

# Determine email subject based on overall status
status_keyword = "GREEN" if overall_status_ok else "RED"
email_subject = f"{status_keyword} - Morning Check Out: {datetime.now().strftime('%Y-%m-%d')}"

email_body += """
    </table>
    <p>Thanks and Regards,<br>\nORx-Zabbix Team, \n\n*** This is an automatically generated email â€“ please do not reply to it. If you have any queries regarding the report please email to orx_zabbix_support@ds.uhc.com ***</p>
</body>
</html>
"""

# Send email using localhost SMTP server
msg = MIMEMultipart()
msg['From'] = 'hello@hi.com'
msg['To'] = 'hello@hi.com'
msg['Subject'] = email_subject
msg.attach(MIMEText(email_body, 'html'))

smtp_server = smtplib.SMTP('smtp.com')
smtp_server.send_message(msg)
smtp_server.quit()

print("Email sent successfully!")
